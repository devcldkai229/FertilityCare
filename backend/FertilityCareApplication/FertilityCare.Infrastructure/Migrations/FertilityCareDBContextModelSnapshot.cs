// <auto-generated />
using System;
using FertilityCare.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FertilityCare.Infrastructure.Migrations
{
    [DbContext(typeof(FertilityCareDBContext))]
    partial class FertilityCareDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FertilityCare.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingEmail")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("BookingPhone")
                        .HasMaxLength(12)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("DoctorScheduleId")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TIME");

                    b.Property<string>("Note")
                        .HasColumnType("NTEXT");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TIME");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TreatmentServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DoctorScheduleId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentServiceId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.AppointmentReminder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasColumnType("NTEXT");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("ReminderMethod")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ToEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentReminder", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Blog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("FeaturedImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientsServed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal?>("Rating")
                        .HasColumnType("DECIMAL(3,2)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.DoctorSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TIME");

                    b.Property<bool>("IsAcceptingPatients")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxAppointments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("Note")
                        .HasColumnType("NTEXT");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TIME");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorSchedule", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.EggRetrievalCycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AbnormalEggs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CycleNumber")
                        .HasColumnType("int");

                    b.Property<int>("ImmatureEggs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MatureEggs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RetrievalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalEggsRetrieved")
                        .HasColumnType("int");

                    b.Property<Guid>("TreatmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("EggRetrievalCycle", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.EmbryoDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("EmbryoFertilizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<bool>("IsViable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Note")
                        .HasColumnType("NTEXT");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TreatmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmbryoFertilizationId");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("EmbryoDetail", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.EmbryoFertilization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("EggRetrievalCycleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FertilizationDate")
                        .HasColumnType("date");

                    b.Property<string>("FertilizationMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<int?>("TotalEggsFertilized")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalEggsUsed")
                        .HasColumnType("int");

                    b.Property<int?>("TotalEmbryosFormed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("TreatmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EggRetrievalCycleId");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("EmbryoFertilization", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.EmbryoTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmbryoDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("FeeCharged")
                        .HasColumnType("DECIMAL(10,2)");

                    b.Property<bool>("IsFrozenTransfer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuccessful")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<string>("PregnancyResultNote")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("TreatmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("EmbryoDetailId");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("EmbryoTransfer", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3,1)");

                    b.Property<Guid>("TreatmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TreatmentQualityRating")
                        .HasColumnType("decimal(3,1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.FrozenEmbryoStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("EmbryoDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FreezeMethod")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonthlyStorageFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StorageEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StorageStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StorageTank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("SurvivalAfterThaw")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("TreatmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EmbryoDetailId");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("FrozenEmbryoStorage", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("MediaFile", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.MedicalExamination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Diagnosis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasDefaultValue("");

                    b.Property<string>("Indications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasDefaultValue("");

                    b.Property<string>("Note")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasDefaultValue("");

                    b.Property<string>("Symptoms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("MedicalExamination", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("NTEXT");

                    b.Property<string>("Note")
                        .HasColumnType("NTEXT");

                    b.Property<Guid>("PatientParnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientParnerId")
                        .IsUnique();

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.PatientPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("PatientPartner", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<DateTime>("PrescriptionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("TreatmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("Prescription", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.PrescriptionItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("DATE");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<DateOnly>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionItem", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TestResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<string>("Note")
                        .HasColumnType("NTEXT");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TreatmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("TestResult", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TreatmentCategory", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<string>("PaymentCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("TreatmentPlanStepId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentCode")
                        .IsUnique();

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TreatmentPlanStepId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("TreatmentPayment", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Note")
                        .HasColumnType("NTEXT");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<Guid>("TreatmentServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentServiceId");

                    b.ToTable("TreatmentPlan", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentPlanStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATE");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DATE");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("StepPrice")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<Guid>("TreatmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("TreatmentStepId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentPlanId");

                    b.HasIndex("TreatmentStepId");

                    b.ToTable("TreatmentPlanStep", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Contraindications")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("NTEXT");

                    b.Property<int?>("Duration")
                        .HasColumnType("INT");

                    b.Property<decimal?>("EstimatePrice")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("RecommendedFor")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<decimal?>("SuccessRate")
                        .HasColumnType("DECIMAL(5,2)");

                    b.Property<Guid>("TreatmentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentCategoryId");

                    b.ToTable("TreatmentService", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<string>("Description")
                        .HasColumnType("NTEXT");

                    b.Property<int?>("EstimatedDurationDays")
                        .HasColumnType("int");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("NVARCHAR(255)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("TreatmentServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentServiceId");

                    b.ToTable("TreatmentStep", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserProfileId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Doctor");

                    b.HasOne("FertilityCare.Domain.Entities.DoctorSchedule", "DoctorSchedule")
                        .WithMany()
                        .HasForeignKey("DoctorScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Appointment_DoctorSchedule");

                    b.HasOne("FertilityCare.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Patient");

                    b.HasOne("FertilityCare.Domain.Entities.TreatmentService", "TreatmentService")
                        .WithMany()
                        .HasForeignKey("TreatmentServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Appointment_TreatmentService");

                    b.Navigation("Doctor");

                    b.Navigation("DoctorSchedule");

                    b.Navigation("Patient");

                    b.Navigation("TreatmentService");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.AppointmentReminder", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentReminder_Appointment");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Blog", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Blog_UserProfile");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.UserProfile", "UserProfile")
                        .WithOne()
                        .HasForeignKey("FertilityCare.Domain.Entities.Doctor", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_UserProfile");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.DoctorSchedule", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorSchedule_Doctor");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.EggRetrievalCycle", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.TreatmentPlan", "TreatmentPlan")
                        .WithMany()
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EggRetrievalCycle_ServicePackagePlan");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.EmbryoDetail", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.EmbryoFertilization", "EmbryoFertilization")
                        .WithMany()
                        .HasForeignKey("EmbryoFertilizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_EmbryoDetail_EmbryoFertilization");

                    b.HasOne("FertilityCare.Domain.Entities.TreatmentPlan", "TreatmentPlan")
                        .WithMany()
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_EmbryoDetail_TreatmentPlan");

                    b.Navigation("EmbryoFertilization");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.EmbryoFertilization", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.EggRetrievalCycle", "EggRetrievalCycle")
                        .WithMany()
                        .HasForeignKey("EggRetrievalCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmbryoFertilization_EggRetrievalCycle");

                    b.HasOne("FertilityCare.Domain.Entities.TreatmentPlan", "TreatmentPlan")
                        .WithMany()
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_EmbryoFertilization_TreatmentPlan");

                    b.Navigation("EggRetrievalCycle");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.EmbryoTransfer", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_EmbryoTransfer_Doctor");

                    b.HasOne("FertilityCare.Domain.Entities.EmbryoDetail", "EmbryoDetail")
                        .WithMany()
                        .HasForeignKey("EmbryoDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_EmbryoTransfer_EmbryoDetail");

                    b.HasOne("FertilityCare.Domain.Entities.TreatmentPlan", "TreatmentPlan")
                        .WithMany()
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_EmbryoTransfer_TreatmentPlan");

                    b.Navigation("EmbryoDetail");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Doctor");

                    b.HasOne("FertilityCare.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Patient");

                    b.HasOne("FertilityCare.Domain.Entities.TreatmentPlan", "TreatmentPlan")
                        .WithMany()
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_TreatmentPlan");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.FrozenEmbryoStorage", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.EmbryoDetail", "EmbryoDetail")
                        .WithMany()
                        .HasForeignKey("EmbryoDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_FrozenEmbryoStorage_EmbryoDetail");

                    b.HasOne("FertilityCare.Domain.Entities.TreatmentPlan", "TreatmentPlan")
                        .WithMany()
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_FrozenEmbryoStorage_TreatmentPlan");

                    b.Navigation("EmbryoDetail");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.MediaFile", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_MediaFile_UserProfile");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.MedicalExamination", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MedicalExamination_Appointment");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Patient", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.PatientPartner", "PatientPartner")
                        .WithOne()
                        .HasForeignKey("FertilityCare.Domain.Entities.Patient", "PatientParnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Patient_Partner");

                    b.HasOne("FertilityCare.Domain.Entities.UserProfile", "UserProfile")
                        .WithOne()
                        .HasForeignKey("FertilityCare.Domain.Entities.Patient", "UserProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Patient_UserProfile");

                    b.Navigation("PatientPartner");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.TreatmentPlan", "TreatmentPlan")
                        .WithMany()
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Prescription_TreatmentPlan");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.PrescriptionItem", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.Prescription", "Prescription")
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PrescriptionItem_Prescription");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TestResult", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.TreatmentPlan", "TreatmentPlan")
                        .WithMany()
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TestResult_ServicePackagePlan");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentPayment", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentPayment_PaymentMethod");

                    b.HasOne("FertilityCare.Domain.Entities.TreatmentPlanStep", "TreatmentPlanStep")
                        .WithMany()
                        .HasForeignKey("TreatmentPlanStepId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentPayment_TreatmentPlanStep");

                    b.HasOne("FertilityCare.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentPayment_UserProfile");

                    b.Navigation("PaymentMethod");

                    b.Navigation("TreatmentPlanStep");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentPlan", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentPlan_Doctor");

                    b.HasOne("FertilityCare.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentPlan_Patient");

                    b.HasOne("FertilityCare.Domain.Entities.TreatmentService", "TreatmentService")
                        .WithMany()
                        .HasForeignKey("TreatmentServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentPlan_TreatmentService");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("TreatmentService");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentPlanStep", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.TreatmentPlan", "TreatmentPlan")
                        .WithMany("TreatmentPlanSteps")
                        .HasForeignKey("TreatmentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentPlanStep_TreatmentPlan");

                    b.HasOne("FertilityCare.Domain.Entities.TreatmentStep", null)
                        .WithMany()
                        .HasForeignKey("TreatmentStepId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentPlanStep_TreatmentStep");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentService", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.TreatmentCategory", "TreatmentCategory")
                        .WithMany()
                        .HasForeignKey("TreatmentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentService_TreatmentCategory");

                    b.Navigation("TreatmentCategory");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentStep", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.TreatmentService", "TreatmentService")
                        .WithMany("TreatmentSteps")
                        .HasForeignKey("TreatmentServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentStep_TreatmentService");

                    b.Navigation("TreatmentService");
                });

            modelBuilder.Entity("FertilityCare.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.HasOne("FertilityCare.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FertilityCare.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FertilityCare.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FertilityCare.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FertilityCare.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.Prescription", b =>
                {
                    b.Navigation("PrescriptionItems");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentPlan", b =>
                {
                    b.Navigation("TreatmentPlanSteps");
                });

            modelBuilder.Entity("FertilityCare.Domain.Entities.TreatmentService", b =>
                {
                    b.Navigation("TreatmentSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
